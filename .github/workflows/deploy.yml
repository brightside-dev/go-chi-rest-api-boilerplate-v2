name: Go CI/CD Workflow

on:
  push:
    branches:
      - master  # Trigger on push to the main branch
      - uat    # Trigger on push to the test branch
  pull_request:
    branches:
      - master  # Trigger on pull requests targeting the main branch
      - uat
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.23'  # Set your Go version

    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: /tmp/go-cache
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod tidy

    - name: Run tests
      run: go test ./...

    - name: Build the app
      run: go build -o main

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: success()  # Only deploy if the build is successful

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.23'

    - name: Set AWS environment variables
      run: |
        if [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
        else
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_UAT }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_UAT }}" >> $GITHUB_ENV
        fi
        
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Upload binary to EC2
    - name: Upload binary to EC2
      run: |
        scp -o StrictHostKeyChecking=no main ec2-user@your-ec2-public-ip:/home/ec2-user/
        ssh -o StrictHostKeyChecking=no ec2-user@your-ec2-public-ip << 'EOF'
          cd /home/ec2-user/
          
          # Ensure .env file exists
          touch .env

          # Create .env file from GitHub Secrets (uat or prod based on branch)
          echo "PORT=${{ env.PORT }}" > .env
          echo "APP_ENV=${{ env.APP_ENV }}" >> .env
          echo "BLUEPRINT_DB_HOST=${{ env.BLUEPRINT_DB_HOST }}" >> .env
          echo "BLUEPRINT_DB_PORT=${{ env.BLUEPRINT_DB_PORT }}" >> .env
          echo "BLUEPRINT_DB_DATABASE=${{ env.BLUEPRINT_DB_DATABASE }}" >> .env
          echo "BLUEPRINT_DB_USERNAME=${{ env.BLUEPRINT_DB_USERNAME }}" >> .env
          echo "BLUEPRINT_DB_PASSWORD=${{ env.BLUEPRINT_DB_PASSWORD }}" >> .env
          echo "GOOSE_DRIVER=${{ env.GOOSE_DRIVER }}" >> .env
          echo "GOOSE_DBSTRING=${{ env.GOOSE_DBSTRING }}" >> .env
          echo "GOOSE_MIGRATION_DIR=${{ env.GOOSE_MIGRATION_DIR }}" >> .env
          echo "FROM_EMAIL=${{ env.FROM_EMAIL }}" >> .env
          echo "FROM_EMAIL_PASSWORD=${{ env.FROM_EMAIL_PASSWORD }}" >> .env
          echo "FROM_EMAIL_SMTP=${{ env.FROM_EMAIL_SMTP }}" >> .env
          echo "EMAIL_SMTP_ADDRESS=${{ env.EMAIL_SMTP_ADDRESS }}" >> .env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> .env
          echo "MAILGUN_API_KEY=${{ env.MAILGUN_API_KEY }}" >> .env
          echo "MAILGUN_DOMAIN=${{ env.MAILGUN_DOMAIN }}" >> .env
          echo "FIREBASE_SERVICE_ACCOUNT_KEY_PROD=${{ env.FIREBASE_SERVICE_ACCOUNT_KEY_PROD }}" >> .env
          echo "FIREBASE_SERVICE_ACCOUNT_KEY_UAT=${{ env.FIREBASE_SERVICE_ACCOUNT_KEY_UAT }}" >> .env
          
          chmod +x main

          # Install Go (if not already installed)
          if ! command -v go &> /dev/null
          then
            echo "Go not found, installing Go..."
            wget https://golang.org/dl/go1.20.linux-amd64.tar.gz
            tar -C /usr/local -xvzf go1.20.linux-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin  # Add Go to PATH
          fi

          # Install Goose if not already installed
          if ! command -v goose &> /dev/null
          then
            echo "Goose not found, installing Goose..."
            go get github.com/pressly/goose@v3.1.0
            export PATH=$PATH:$HOME/go/bin  # Add Goose (GOPATH bin) to PATH
          fi

          # Run migrations
          echo "Running migrations..."
          goose up

          # Run the main app in the background
          nohup ./main &

          # Optionally, run the command module in the background as well (only run this once when needed)
          # nohup go run ./cmd/command test_email &
        EOF
